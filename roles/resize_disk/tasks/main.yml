---
# https://openwrt.org/docs/guide-user/installation/installation_methods/sd_card#expanding_the_filesystem
# https://openwrt.org/docs/guide-user/installation/openwrt_x86#resizing_partitions
# https://forum.openwrt.org/t/howto-resizing-root-partition-on-x86-march-2023-edition

- name: Install lsblk package
  community.general.opkg:
    name: lsblk
    state: present
    update_cache: true

- name: Get lsblk info
  ansible.builtin.command: lsblk -O -J -b
  register: lsblk_raw_output
  changed_when: false

- name: Parse lsblk JSON
  ansible.builtin.set_fact:
    lsblk_data: "{{ lsblk_raw_output.stdout | from_json }}"

- name: Identify the root disk object
  ansible.builtin.set_fact:
    # Find the top-level block device (type 'disk') that has a child partition mounted at '/'
    root_disk: >-
      {{ lsblk_data | json_query("blockdevices[?type == 'disk' && children[?mountpoint == '/']]") | first }}

- name: Identify the root partition object
  ansible.builtin.set_fact:
    # From the root disk's children, find the partition mounted at '/'
    root_partition: >-
      {{ (root_disk.children | default([])) | json_query("[?mountpoint == '/']") | first }}

- name: Debug identified root disk and partition details
  ansible.builtin.debug:
    msg: |
      --- Root Disk Details ---
      Name: {{ root_disk.name | default('N/A') }}
      Path: {{ root_disk.path | default('N/A') }}
      Size: {{ (root_disk.size | default(0) / (1024 * 1024 * 1024)) | round(2) }} GB

      --- Root Partition Details ---
      Name: {{ root_partition.name | default('N/A') }}
      Path: {{ root_partition.path | default('N/A') }}
      Size: {{ (root_partition.size | default(0) / (1024 * 1024)) | round(2) }} MB
      FS size: {{ (root_partition.fssize | default(0) / (1024 * 1024)) | round(2) }} MB
      Mountpoint: {{ root_partition.mountpoint | default('N/A') }}
      Partition Number (partn): {{ root_partition.partn | default('N/A') }}

- name: Set root disk partitions size
  ansible.builtin.set_fact:
    root_disk_partitions_size: "{{ root_disk.children | map(attribute='fssize') | sum }}"

- name: Set root disk unallocated space
  ansible.builtin.set_fact:
    root_disk_unallocated_space: "{{ root_disk.size | int - root_disk_partitions_size | int }}"

- name: Set root disk unallocated space percentage
  ansible.builtin.set_fact:
    root_disk_unallocated_space_percentage: "{{ (root_disk_unallocated_space | int / root_disk.size | int * 100) | round(2) }}"

- name: Display unallocated space on the root disk
  ansible.builtin.debug:
    msg: |
      Total size of {{ root_disk.name }}: {{ (root_disk.size | int / (1024 * 1024 * 1024)) | round(2) }} GB
      Total size of filesystems on {{ root_disk.name }}: {{ (root_disk_partitions_size | int / (1024 * 1024 * 1024)) | round(2) }} GB
      Unallocated space on {{ root_disk.name }}: {{ (root_disk_unallocated_space | int / (1024 * 1024)) | round(2) }} MB
      Percentage of unallocated space on {{ root_disk.name }}: {{ (root_disk_unallocated_space_percentage | float) }}%
      Is there unallocated space? {{ root_disk_unallocated_space_percentage | float > 3 }}

# is_free_space = true if root disk has less than 3% of unallocated space by filesystem
- name: Set is free space
  ansible.builtin.set_fact:
    is_free_space: "{{ root_disk_unallocated_space_percentage | float > 3 }}"

- name: Install needed packages
  community.general.opkg:
    name: "{{ item }}"
    state: present
  loop:
    - losetup
    - resize2fs
    - parted
  when: is_free_space

- name: Resize root partition
  ansible.builtin.command: parted -s {{ root_disk.path }} resizepart {{ root_partition.partn }} 100%
  register: resize_partition_result
  changed_when: resize_partition_result.rc == 0
  when: is_free_space

- name: Reboot
  ansible.builtin.include_role:
    name: reboot
  when: is_free_space and fix_resize_partition_result.changed

# /dev/loop0
- name: Get loop partition
  ansible.builtin.command: losetup -f
  register: get_loop_ext4_result
  changed_when: false
  when: is_free_space

# loop = /dev/loop0
- name: Set loop partition
  ansible.builtin.set_fact:
    loop_partition: >-
      "{{ get_loop_ext4_result.stdout }}"
  when: is_free_space

- name: Invert loop root
  ansible.builtin.command: losetup {{ loop_partition }} {{ root_partition.path }}
  register: invert_loop_result
  changed_when: invert_loop_result.rc == 0
  when: is_free_space

- name: Resize root filesystem
  ansible.builtin.command: resize2fs -f {{ loop_partition }}
  register: rootfs_result
  changed_when: rootfs_result.rc == 0
  when: is_free_space

- name: Reboot
  ansible.builtin.include_role:
    name: reboot
  when: is_free_space and rootfs_result.changed

- name: Remove unused packages
  community.general.opkg:
    name: "{{ item }}"
    state: absent
    force: removal-of-dependent-packages
  loop:
    - losetup
    - parted

- name: Remove resize2fs package without autoremove
  community.general.opkg:
    name: resize2fs
    state: absent
