---
# https://openwrt.org/docs/guide-user/installation/installation_methods/sd_card#expanding_the_filesystem
# https://openwrt.org/docs/guide-user/installation/openwrt_x86#resizing_partitions
# https://forum.openwrt.org/t/howto-resizing-root-partition-on-x86-march-2023-edition

- name: Install lsblk package
  community.general.opkg:
    name: lsblk
    state: present

# ext4 or overlay
- name: Get root partition type
  ansible.builtin.shell: |
    set -o pipefail
    df -Th / | awk 'NR==2 {print $2}'
  register: resize_disk_partition_type_result
  changed_when: false

# resize_disk_root_partition_type = ext4 or squashfs
- name: Set root partition type
  ansible.builtin.set_fact:
    resize_disk_root_partition_type: "{{ 'ext4' if resize_disk_partition_type_result.stdout == 'ext4' else 'squashfs' }}"
    resize_disk_rom_mountpoint: "{{ '/' if resize_disk_partition_type_result.stdout == 'ext4' else '/rom' }}"

# /dev/nvme0n1
- name: Get root device
  ansible.builtin.shell: |
    set -o pipefail
    lsblk -p -J |
    jsonfilter -e '$.blockdevices[@.children[@.mountpoints[-1]="{{ resize_disk_rom_mountpoint }}"]].name'
  register: resize_disk_root_device_result
  changed_when: false

# resize_disk_root_device = /dev/nvme0n1
- name: Set root device
  ansible.builtin.set_fact:
    resize_disk_root_device: "{{ resize_disk_root_device_result.stdout }}"

# /dev/nvme0n1p2
- name: Get root partition
  ansible.builtin.shell: |
    set -o pipefail
    lsblk -p -J |
    jsonfilter -e '$.blockdevices[*].children[@.mountpoints[-1]="{{ resize_disk_rom_mountpoint }}"].name'
  register: resize_disk_root_partition_result
  changed_when: false

# resize_disk_root_partition = /dev/nvme0n1p2
- name: Set root partition
  ansible.builtin.set_fact:
    resize_disk_root_partition: "{{ resize_disk_root_partition_result.stdout }}"

# resize_disk_root_partition_number = 2
- name: Set root partition number
  ansible.builtin.set_fact:
    resize_disk_root_partition_number:
      "{{ resize_disk_root_partition | split(resize_disk_root_device) | last | regex_replace('^p(.*)$', '\\1') }}"

# root disk unallocated space in bytes
- name: Set root disk unallocated space in bytes
  ansible.builtin.shell: |
    set -o pipefail
    ROOT_DISK_SIZE=$(lsblk -b -J | \
      jsonfilter -e '$.blockdevices[@.children[@.mountpoints[-1]="{{ resize_disk_rom_mountpoint }}"]].size')
    ROOT_DISK_PARTITIONS_SIZE=$(lsblk -b -J | \
      jsonfilter -e '$.blockdevices[@.children[@.mountpoints[-1]="{{ resize_disk_rom_mountpoint }}"]].children[*].size' | \
      awk '{s+=$1} END {print s}')
    echo $(($ROOT_DISK_SIZE - $ROOT_DISK_PARTITIONS_SIZE))
  register: resize_disk_root_disk_unallocated_size_result
  changed_when: false

# resize_disk_has_free_space = true if root disk has free space (more than 100kB)
- name: Set has free space
  ansible.builtin.set_fact:
    resize_disk_has_free_space: "{{ (resize_disk_root_disk_unallocated_size_result.stdout | int) > 100000 }}"

- name: Install needed packages
  community.general.opkg:
    name: "{{ item }}"
    state: present
  loop:
    - losetup
    - resize2fs
    - parted
    - fdisk
  when: resize_disk_has_free_space

- name: Fix partition table
  ansible.builtin.shell: |
   set -o pipefail
   printf "w" | fdisk {{ resize_disk_root_device }}
  register: resize_disk_fix_partition_table_result
  changed_when: resize_disk_fix_partition_table_result.rc == 0
  when: resize_disk_has_free_space

- name: Resize root partition
  ansible.builtin.command: parted -s {{ resize_disk_root_device }} resizepart {{ resize_disk_root_partition_number }} 100%
  register: resize_disk_fix_resize_partition_result
  changed_when: resize_disk_fix_resize_partition_result.rc == 0
  when: resize_disk_has_free_space

# abeae232-5289-82a1-0e57-2f2fe899f402
- name: Get root partition uuid
  ansible.builtin.command: "lsblk -n -o PARTUUID {{ resize_disk_root_partition }}"
  register: resize_disk_get_rootuuid_result
  changed_when: false
  when: resize_disk_has_free_space

# resize_disk_uuid = abeae232-5289-82a1-0e57-2f2fe899f402
- name: Set root partition uuid
  ansible.builtin.set_fact:
    resize_disk_uuid: "{{ resize_disk_get_rootuuid_result.stdout }}"
  when: resize_disk_has_free_space

- name: Update grub boot partition uuid
  ansible.builtin.lineinfile:
    path: /boot/grub/grub.cfg
    regexp: ^(.*PARTUUID=)(?!{{ resize_disk_uuid }})[^ ]+( .*)$
    line: \1{{ item }}\2
    backrefs: true
  loop:
    - "{{ resize_disk_uuid }}"
    - "{{ resize_disk_uuid }}"
  when: resize_disk_has_free_space

- name: Reboot
  ansible.builtin.include_role:
    name: reboot
  when: resize_disk_has_free_space and resize_disk_fix_resize_partition_result.changed

# /dev/loop0
- name: Get loop partition
  ansible.builtin.command: losetup -f
  register: resize_disk_get_loop_ext4_result
  changed_when: false
  when: resize_disk_has_free_space and resize_disk_root_partition_type == 'ext4'

# /dev/loop0
- name: Get loop partition
  ansible.builtin.shell: |
    set -o pipefail
    losetup -n -l | sed -n -e "\|\s.*\s{{ resize_disk_root_partition | split('/dev') | last }}\s.*$|{s///p;q}"
  register: resize_disk_get_loop_squashfs_result
  changed_when: false
  when: resize_disk_has_free_space and resize_disk_root_partition_type == 'squashfs'

# resize_disk_loop = /dev/loop0
- name: Set loop partition
  ansible.builtin.set_fact:
    resize_disk_loop: >-
      "{{ resize_disk_get_loop_ext4_result.stdout
          if resize_disk_root_partition_type == 'ext4'
          else resize_disk_get_loop_squashfs_result.stdout }}"
  when: resize_disk_has_free_space

- name: Invert loop root
  ansible.builtin.command: losetup {{ resize_disk_loop }} {{ resize_disk_root_partition }}
  register: resize_disk_invert_loop_result
  changed_when: resize_disk_invert_loop_result.rc == 0
  when: resize_disk_has_free_space and resize_disk_root_partition_type == 'ext4'

- name: Resize root filesystem
  ansible.builtin.command: resize2fs -f {{ resize_disk_loop }}
  register: resize_disk_rootfs_result
  changed_when: resize_disk_rootfs_result.rc == 0
  when: resize_disk_has_free_space

- name: Reboot
  ansible.builtin.include_role:
    name: reboot
  when: resize_disk_has_free_space and resize_disk_rootfs_result.changed

- name: Remove unused packages
  community.general.opkg:
    name: "{{ item }}"
    state: absent
    autoremove: true
  loop:
    - losetup
    - parted
    - fdisk

- name: Remove resize2fs package without autoremove
  community.general.opkg:
    name: resize2fs
    state: absent
