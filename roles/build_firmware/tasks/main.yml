---
- name: Creates build dir
  ansible.builtin.file:
    path: "{{ build_firmware_build_dir }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"
  delegate_to: localhost
  become: false

- name: Set OpenWRT download url
  ansible.builtin.set_fact:
    # https://downloads.openwrt.org/snapshots/targets/x86/64/
    # https://downloads.openwrt.org/releases/22.03.4/targets/x86/64/
    build_firmware_download_url: >-
      https://downloads.openwrt.org/{{
      'releases/' + build_firmware_version if build_firmware_version else 'snapshots'
      }}/targets/{{ build_firmware_target }}/{{
      build_firmware_subtarget }}/

- name: Set imagebuilder url
  ansible.builtin.set_fact:
    # https://downloads.openwrt.org/snapshots/targets/x86/64/openwrt-imagebuilder-x86-64.Linux-x86_64.tar.zst
    # https://downloads.openwrt.org/releases/22.03.4/targets/x86/64/openwrt-imagebuilder-22.03.4-x86-64.Linux-x86_64.tar.zst
    build_firmware_imagebuilder_url: >-
      {{ build_firmware_download_url }}openwrt-imagebuilder{{
      '-' + build_firmware_version if build_firmware_version }}-{{
      build_firmware_target }}-{{
      build_firmware_subtarget }}.Linux-x86_64.tar.zst

- name: Set imagebuilder archive filename
  ansible.builtin.set_fact:
    # openwrt-imagebuilder-22.03.4-x86-64.Linux-x86_64.tar.zst
    build_firmware_imagebuilder_archive: "{{ build_firmware_imagebuilder_url | basename }}"

- name: Set imagebuilder uncompressed archive dirname
  ansible.builtin.set_fact:
    # openwrt-imagebuilder-22.03.4-x86-64.Linux-x86_64
    build_firmware_dirname: "{{ build_firmware_imagebuilder_archive | splitext | first | splitext | first }}"

- name: Set working dir
  ansible.builtin.set_fact:
    # /tmp/openwrt-imagebuilder-22.03.4-x86-64.Linux-x86_64
    build_firmware_extracted_dir: "{{ build_firmware_build_dir + build_firmware_dirname }}"

- name: Download sha256sums file
  ansible.builtin.get_url:
    url: "{{ build_firmware_download_url }}sha256sums"
    dest: "{{ build_firmware_build_dir }}sha256sums"
    mode: u=rw,g=r,o=r
  delegate_to: localhost
  become: false

- name: Set imagebuilder archive sha256
  ansible.builtin.set_fact:
    build_firmware_imagebuilder_checksum: >-
      {{ 'sha256:' +
        (
          lookup('file', build_firmware_build_dir + 'sha256sums') |
          regex_search('([a-zA-Z0-9]+) \*' + build_firmware_imagebuilder_archive.replace('.', '\.'), '\1') |
          first
        )
      }}

- name: Download imagebuilder
  ansible.builtin.get_url:
    url: "{{ build_firmware_imagebuilder_url }}"
    dest: "{{ build_firmware_build_dir + build_firmware_imagebuilder_archive }}"
    checksum: "{{ build_firmware_imagebuilder_checksum }}"
    mode: u=rw,g=r,o=r
  delegate_to: localhost
  become: false

- name: Delete extracted imagebuilder
  ansible.builtin.file:
    path: "{{ build_firmware_extracted_dir }}"
    state: absent
  delegate_to: localhost
  become: false

- name: Unarchive imagebuilder
  ansible.builtin.unarchive:
    src: "{{ build_firmware_build_dir + build_firmware_imagebuilder_archive }}"
    dest: "{{ build_firmware_build_dir }}"
    creates: "{{ build_firmware_extracted_dir }}"
    remote_src: true
  delegate_to: localhost
  become: false

- name: Increase rootfs partition size to 2048M
  ansible.builtin.lineinfile:
    path: "{{ build_firmware_extracted_dir }}/.config"
    regexp: '^CONFIG_TARGET_ROOTFS_PARTSIZE='
    line: 'CONFIG_TARGET_ROOTFS_PARTSIZE=2048'
  delegate_to: localhost
  become: false

- name: Setting grub timeout to 0s to speedup boot
  ansible.builtin.lineinfile:
    path: "{{ build_firmware_extracted_dir }}/.config"
    regexp: '^CONFIG_GRUB_TIMEOUT='
    line: 'CONFIG_GRUB_TIMEOUT="0"'
  delegate_to: localhost
  become: false

- name: "Download luci-app-temp-status package"
  ansible.builtin.get_url:
    url: "https://github.com/gSpotx2f/packages-openwrt/raw/master/current/luci-app-temp-status_0.7.1-r2_all.ipk"
    dest: "{{ build_firmware_extracted_dir }}/packages/"
    validate_certs: false
    mode: u=rw,g=r,o=r
  delegate_to: localhost
  become: false

- name: Copy custom files
  ansible.builtin.copy:
    src: "files/"
    dest: "{{ build_firmware_extracted_dir }}/files"
    mode: u=rw,g=r,o=r
  delegate_to: localhost
  become: false

- name: Ensure uci-defaults directory exists
  ansible.builtin.file:
    path: "{{ build_firmware_extracted_dir }}/files/etc/uci-defaults"
    state: directory
    mode: u=rwx,g=rx,o=rx
  delegate_to: localhost
  become: false

- name: Recursively process all templates using filetree
  ansible.builtin.template:
    # 'item.path' is the full path to the source template file.
    src: '{{ template_file.src }}'
    # The destination path is built by removing the 'templates/' prefix and the '.j2' suffix.
    dest: "{{ build_firmware_extracted_dir }}/files/{{ template_file.path | splitext | first }}"
    mode: u=rw,g=r,o=r
  # Use the filetree query to recursively find all files.
  # Use the powerful `filetree` lookup instead of `fileglob`
  loop: "{{ query('community.general.filetree', role_path ~ '/templates') }}"
  # Rename the loop variable for better readability
  loop_control:
    loop_var: template_file
  # Only process items that are files AND match the regex for ending in '.j2'.
  when:
    - template_file.state == 'file'
    - template_file.path.endswith('.j2')
  delegate_to: localhost
  become: false

- name: Set make image params
  ansible.builtin.set_fact:
    build_firmware_make_image_params: >
      PROFILE="{{ build_firmware_profile }}"
      FILES="files"
      PACKAGES="{{
        ((build_firmware_packages_exclude | map('regex_replace', '^(.*)$', '-\1')) + build_firmware_packages_include)
        | join(' ') }}"

- name: Show build_firmware_make_image_params vars_files
  ansible.builtin.debug:
    var: build_firmware_make_image_params

- name: Make image
  community.general.make:
    chdir: "{{ build_firmware_extracted_dir }}"
    target: image
    params: "{{ build_firmware_make_image_params }}"
  delegate_to: localhost
  become: false
