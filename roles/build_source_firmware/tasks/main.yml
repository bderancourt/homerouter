---
# Full OpenWrt source build role
# High-level flow:
# 1. Prepare work dir / acquire source tarball
# 2. Add extra feeds and update/install
# 3. Generate .config with target/profile + package selections + microcode + kernel cmdline
# 4. Drop overlay files & UCI defaults
# 5. Build
# 6. Fetch artifacts to control machine

- name: Ensure work directory exists
  ansible.builtin.file:
    path: "{{ build_source_work_dir }}"
    state: directory
    mode: '0755'

- name: Remove existing source tree when force re-extract
  ansible.builtin.file:
    path: "{{ build_source_work_dir }}"
    state: absent
  when: build_source_force_reextract

- name: Re-create work directory
  ansible.builtin.file:
    path: "{{ build_source_work_dir }}"
    state: directory
    mode: '0755'

- name: Download source tarball
  ansible.builtin.get_url:
    url: "{{ build_source_tarball_url }}"
    dest: "{{ build_source_work_dir }}/{{ build_source_tarball_filename }}"
    mode: '0644'

- name: Extract source tarball
  ansible.builtin.unarchive:
    src: "{{ build_source_work_dir }}/{{ build_source_tarball_filename }}"
    dest: "{{ build_source_work_dir }}"
    remote_src: true
    extra_opts: ["--strip-components=1"]

- name: Append extra feeds (if any)
  ansible.builtin.lineinfile:
    path: "{{ build_source_work_dir }}/feeds.conf.default"
    line: "{{ item }}"
    create: false
    state: present
  loop: "{{ build_source_extra_feeds }}"
  when: build_source_extra_feeds | length > 0

- name: Update feeds
  ansible.builtin.command: ./scripts/feeds update -a
  args:
    chdir: "{{ build_source_work_dir }}"
  register: update_feeds
  changed_when: update_feeds.stdout is defined and ("Fetching" in update_feeds.stdout)
  when: true  # still needed in tarball mode to refresh indexes

- name: Install feeds
  ansible.builtin.command: ./scripts/feeds install -a
  args:
    chdir: "{{ build_source_work_dir }}"
  register: install_feeds
  changed_when: install_feeds.stdout is defined and (install_feeds.stdout | length > 0)
  when: true

- name: Base minimal .config (target + profile)
  ansible.builtin.copy:
    dest: "{{ build_source_work_dir }}/.config"
    content: |
      CONFIG_TARGET_{{ build_source_target | upper }}=y
      CONFIG_TARGET_{{ build_source_target | upper }}_{{ build_source_subtarget }}=y
      CONFIG_TARGET_{{ build_source_target | upper }}_{{ build_source_subtarget }}_DEVICE_{{ build_source_profile | upper }}=y
    mode: '0644'

- name: Ensure microcode + late loading (if enabled)
  ansible.builtin.lineinfile:
    path: "{{ build_source_work_dir }}/.config"
    insertafter: EOF
    line: "CONFIG_MICROCODE=y"
  when: build_source_enable_microcode

- name: Ensure microcode Intel + late loading
  when: build_source_enable_microcode
  block:
    - name: Enable Intel microcode option
      ansible.builtin.lineinfile:
        path: "{{ build_source_work_dir }}/.config"
        insertafter: EOF
        line: "CONFIG_MICROCODE_INTEL=y"
    - name: Enable late microcode loading option
      ansible.builtin.lineinfile:
        path: "{{ build_source_work_dir }}/.config"
        insertafter: EOF
        line: "CONFIG_MICROCODE_LATE_LOADING=y"

- name: Kernel command line override (append)
  ansible.builtin.lineinfile:
    path: "{{ build_source_work_dir }}/.config"
    insertafter: EOF
    line: "CONFIG_KERNEL_CMDLINE_OVERRIDE=y"
  when: build_source_kernel_cmdline_extra | length > 0

- name: Kernel command line string
  ansible.builtin.lineinfile:
    path: "{{ build_source_work_dir }}/.config"
    insertafter: EOF
    line: "CONFIG_KERNEL_CMDLINE=\"{{ build_source_kernel_cmdline_extra }}\""
  when: build_source_kernel_cmdline_extra | length > 0

- name: Add include packages
  ansible.builtin.lineinfile:
    path: "{{ build_source_work_dir }}/.config"
    insertafter: EOF
    line: "CONFIG_PACKAGE_{{ item | regex_replace('[-.+]', '_') }}=y"
  loop: "{{ build_source_packages_include }}"

- name: Remove excluded packages
  ansible.builtin.lineinfile:
    path: "{{ build_source_work_dir }}/.config"
    insertafter: EOF
    line: "# CONFIG_PACKAGE_{{ item | regex_replace('[-.+]', '_') }} is not set"
  loop: "{{ build_source_packages_remove }}"

- name: Run defconfig to expand
  ansible.builtin.command: make defconfig
  args:
    chdir: "{{ build_source_work_dir }}"
  register: defconfig
  changed_when: defconfig.rc == 0

- name: Create overlay root (if requested)
  ansible.builtin.file:
    path: "{{ build_source_overlay_dir }}"
    state: directory
    mode: '0755'
  when: build_source_overlay_dir is not none

- name: Copy overlay files into build tree
  ansible.posix.synchronize:
    src: "{{ build_source_overlay_dir }}/"
    dest: "{{ build_source_work_dir }}/files/"
    delete: false
  delegate_to: localhost
  when: (build_source_overlay_dir | length > 0) and (build_source_overlay_dir is exists)
  failed_when: false

- name: Ensure UCI defaults dir exists
  ansible.builtin.file:
    path: "{{ build_source_work_dir }}/files/etc/uci-defaults"
    state: directory
    mode: '0755'

- name: Copy bundled UCI defaults scripts from role
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ build_source_work_dir }}/files/etc/uci-defaults/{{ item | basename }}"
    mode: '0755'
  with_fileglob:
    - "{{ role_path }}/files/uci-defaults/*"

- name: Install inline UCI defaults scripts
  ansible.builtin.copy:
    dest: "{{ build_source_work_dir }}/files/etc/uci-defaults/{{ item.key }}"
    mode: '0755'
    content: "{{ item.value | trim }}\n"
  loop: "{{ build_source_uci_defaults | dict2items }}"
  when: build_source_uci_defaults | length > 0

- name: Prefetch sources (optional)
  ansible.builtin.command: make download -j"{{ build_source_parallel_jobs | default(ansible_processor_vcpus | default(4), true) }}"
  args:
    chdir: "{{ build_source_work_dir }}"
  when: build_source_prefetch
  changed_when: false  # download does not modify state beyond cache

- name: Build firmware (this will take time)
  ansible.builtin.command: make -j"{{ build_source_parallel_jobs | default(ansible_processor_vcpus | default(4), true) }}"
  args:
    chdir: "{{ build_source_work_dir }}"
  when: not build_source_skip_make
  changed_when: true

- name: Find produced images
  ansible.builtin.find:
    paths: "{{ build_source_work_dir }}/{{ build_source_output_dir }}"
    patterns: "{{ build_source_image_glob }}"
  register: build_source_images

- name: Ensure local artifacts dir exists
  ansible.builtin.file:
    path: "{{ build_source_local_artifacts_dir }}"
    state: directory
    mode: '0755'
  delegate_to: localhost

- name: Fetch images locally
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ build_source_local_artifacts_dir }}/"
    flat: true
  loop: "{{ build_source_images.files }}"

- name: Fetch sha256 manifest
  ansible.builtin.fetch:
    src: "{{ build_source_work_dir }}/{{ build_source_output_dir }}/{{ build_source_sha256_file }}"
    dest: "{{ build_source_local_artifacts_dir }}/{{ build_source_sha256_file }}"
    flat: true
  failed_when: false
