---
# OpenWrt full source build defaults
# These defaults can be overridden in group_vars/host_vars.

build_source_work_dir: "{{ playbook_dir }}/openwrt-src"
## Source acquisition (tarball only)
# Release tag (must exist under downloads). Example: v24.10.2
build_source_ref: "v24.10.2"
# GitHub tag archive URL (tar.gz)
build_source_tarball_url: "https://github.com/openwrt/openwrt/archive/refs/tags/{{ build_source_ref }}.tar.gz"
build_source_tarball_filename: "openwrt-{{ build_source_ref }}.tar.gz"

# Target / subtarget
build_source_target: x86
build_source_subtarget: 64
build_source_profile: generic

# Kernel / build feature toggles
build_source_enable_microcode: true
build_source_kernel_cmdline_extra: "pcie_aspm=force intel_idle.max_cstate=9"

# Packages to add/remove
build_source_packages_include:
  - irqbalance
  - ethtool
  - tcpdump-mini
  - htop
  - bash
  - iperf3
  - ca-bundle
  - luci
  - luci-ssl
  - collectd
  - collectd-mod-network
  - collectd-mod-interface
  - collectd-mod-cpu
  - collectd-mod-memory
  - collectd-mod-load
  - collectd-mod-iwinfo
  - btop

build_source_packages_remove:
  - wpad-basic-mbedtls

# Feeds configuration additions (lines appended to feeds.conf.default)
build_source_extra_feeds: []
#  - "src/gz myfeed https://example.com/openwrt/packages/x86_64"

# Overlay directory with files to copy directly onto rootfs (relative to role or absolute)
build_source_overlay_dir: "{{ role_path }}/files/overlay"

# Always re-extract tarball when present? (false keeps existing extracted tree)
build_source_force_reextract: false

# Parallel build jobs (default: number of processors if empty)
build_source_parallel_jobs: ""

# UCI defaults scripts to install (filename => inline content). If empty, we'll rely on existing files under files/uci-defaults
build_source_uci_defaults: {}

# Whether to run 'make download' before build to prefetch sources
build_source_prefetch: false

# Final artifact directory (inside work dir 'bin/targets/<target>/<subtarget>') used to pick images
build_source_output_dir: "bin/targets/{{ build_source_target }}/{{ build_source_target }}{{ build_source_subtarget }}"

# Final images pattern to collect (glob evaluated inside output dir)
build_source_image_glob: "*combined*img.gz"

# SHA256 manifest file name (inside output dir) to capture
build_source_sha256_file: "sha256sums"

# Where to place exported artifacts locally (controller)
build_source_local_artifacts_dir: "{{ playbook_dir | default(inventory_dir) }}/build/source_firmware"

# Set to true to skip the actual build (for debugging earlier steps)
build_source_skip_make: false
