---
# https://openwrt.org/docs/guide-user/services/dns/adguard-home
- name: Install AdGuard Home package
  community.general.opkg:
    name: adguardhome
    state: present

- name: Generate adguardhome password hash
  ansible.builtin.command:
    cmd: htpasswd -B -n -b {{ adguardhome_user }} {{ adguardhome_password }}
  register: install_adguardhome_pwdhash_result
  changed_when: false
  delegate_to: localhost

- name: Set adguardhome password hash
  ansible.builtin.set_fact:
    install_adguardhome_pwdhash: "{{ install_adguardhome_pwdhash_result.stdout | split(':') | last }}"

- name: Template adguardhome.yaml.j2 to /etc/adguardhome.yaml
  ansible.builtin.template:
    src: templates/adguardhome.yaml.j2
    dest: /etc/adguardhome.yaml
    owner: root
    group: root
    mode: u=rw,g=r,o=r

- name: Copy nginx reverse proxy configuration to expose ADH at https://openwrt.lan/adh/
  ansible.builtin.copy:
    src: files/adguardhome.locations
    dest: /etc/nginx/conf.d/adguardhome.locations
    owner: root
    group: root
    mode: u=rw,g=,o=

- name: Get the router IPv4 address
  ansible.builtin.shell: |
    set -o pipefail
    /sbin/ip -o -4 addr list br-lan |
    awk 'NR==1{ split($4, ip_addr, "/"); print ip_addr[1] }'
  register: install_adguardhome_router_ipv4_result
  changed_when: false

- name: Get the router IPv6 addresses
  ansible.builtin.shell: |
    set -o pipefail
    /sbin/ip -o -6 addr list br-lan scope global |
    awk 'NR==1{ split($4, ip_addr, "/"); print ip_addr[1] }'
  register: install_adguardhome_router_ipv6_result
  changed_when: false

- name: Set router IPv4 & IPv6 addresses
  ansible.builtin.set_fact:
    install_adguardhome_router_ipv4_addr: "{{ install_adguardhome_router_ipv4_result.stdout }}"
    install_adguardhome_router_ipv6_addr: "{{ install_adguardhome_router_ipv6_result.stdout }}"

# 1. Enable dnsmasq to do PTR requests.
# 2. Reduce dnsmasq cache size as it will only provide PTR/rDNS info.
# 3. Disable rebind protection. Filtered DNS service responses from blocked domains are 0.0.0.0
# which causes dnsmasq to fill the system log with possible DNS-rebind attack detected messages.
# 4. Move dnsmasq to port 54.
# 5. Set Ipv4 DNS advertised by option 6 DHCP
# 6. Set Ipv6 DNS advertised by DHCP
- name: Configure dnsmasq as local DNS forwarder only
  uci:
    command: section
    config: dhcp
    type: dnsmasq
    find-by:
      domain: lan
    value:
      noresolv: 0
      cachesize: 1000
      rebind_protection: 0
      port: 54
      server:
        - "{{ install_adguardhome_router_ipv4_addr }}"

- name: Configure DHCP DNS options
  uci:
    command: section
    config: dhcp
    type: dhcp
    name: lan
    value:
      dhcp_option:
        # DHCP option 6: which DNS (Domain Name Server) to include in the IP configuration for name resolution
        - "6,{{ install_adguardhome_router_ipv4_addr }}"
        # DHCP option 3: default router or last resort gateway for this interface
        - "3,{{ install_adguardhome_router_ipv4_addr }}"
      dns:
        - "{{ install_adguardhome_router_ipv6_addr }}"

- name: Use local DNS instead of ISP DNS on wan
  uci:
    command: set
    key: network.wan
    value:
      peerdns: 0
      dns: 127.0.0.1

- name: Use local DNS instead of ISP DNS on wan6
  uci:
    command: set
    key: network.wan6
    value:
      peerdns: 0
      dns: 0::1

- name: Adding DNS redirection
  uci:
    command: section
    config: firewall
    name: dns_intercept
    type: redirect
    value:
      name: Intercept-DNS
      src: lan
      src_dport: 53
      proto: tcp udp
      target: DNAT
      dest: lan
      dest_port: 53
      family: any

- name: Commit
  uci:
    command: commit
    key: "{{ item }}"
  loop:
    - dhcp
    - network
    - firewall

- name: Reload config
  ansible.builtin.command: reload_config
  changed_when: false

- name: Restart services
  ansible.builtin.service:
    name: "{{ item }}"
    state: restarted
  loop:
    - network
    - firewall
    - dnsmasq
    - adguardhome
    - nginx
